---
title: "Seurat tutorial 2 - pbmc multi-platform - with and Seurat v5 integrative analysis new sctransform steps"
subtitle: "Sep 2024"
author: "Satija lab (original); Scot J Matkovich (notes)"
format:
  gfm: default
  html:
    embed-resources: true
    toc: true
    toc_float: true
    toc-depth: 3
    toc-expand: 3
    toc-location: right
editor: visual
execute:
  cache: false
  keep-md: false
output:
  gfm: default
  html: default
editor_options: 
  chunk_output_type: console
---

# pbmcsca - Seurat v5 integrative analysis tutorial

Original sources: [R markdown](https://github.com/satijalab/seurat/blob/HEAD/vignettes/seurat5_integration.Rmd) and [webpage](https://satijalab.org/seurat/articles/seurat5_integration.html). The recommended new `sctransform` steps to replace `NormalizeData`, `FindVariableFeatures` and `ScaleData` were derived in part from this [R markdown](https://github.com/satijalab/seurat/blob/HEAD/vignettes/sctransform_vignette.Rmd) and associated [webpage](https://satijalab.org/seurat/articles/sctransform_vignette).

*Note Sep 2024*: On R 4.4.0/4.4.1 and Bioconductor 3.20, I had to install the `SeuratWrappers` package via `devtools::install_github ('satijalab/seurat-wrappers')`. Separately, the `TFBSTools` package needed installation via `BiocManager::install("TFBSTools")` to avoid an error when installing the `Azimuth` package via `devtools::install_github("satijalab/azimuth", "seurat5")` or via `remotes::install_github("satijalab/azimuth", ref = "master")` (master/main branch rather than seurat5 branch of the repo). I also had to install `SeuratData` via `remotes::install_github("satijalab/seurat-data", "seurat5", quiet = TRUE)` as recommended at https://satijalab.org/seurat/articles/install.html

```{r}
#| label: libraries_output_init
#| echo: true
#| eval: true
#| message: false
#| code-copy: true

library(Seurat)
library(SeuratData)
InstallData("pbmcsca") # from SeuratData package reference
library(SeuratWrappers)
library(Azimuth)
library(gt) # gt (great tables) package
library(ggplot2)
library(patchwork)
options(future.globals.maxSize = 1e9)

work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))

```

## Introduction

Integration of single-cell sequencing datasets, for example across experimental batches, donors, or conditions, is often an important step in scRNA-seq workflows. Integrative analysis can help to match shared cell types and states across datasets, which can boost statistical power, and most importantly, facilitate accurate comparative analysis across datasets. In previous versions of Seurat we introduced methods for integrative analysis, including our ‘anchor-based’ integration workflow. Many labs have also published powerful and pioneering methods, including [Harmony](https://github.com/immunogenomics/harmony) and [scVI](https://yoseflab.github.io/software/scvi-tools/), for integrative analysis.

We recognize that while the goal of matching shared cell types across datasets may be important for many problems, users may also be concerned about which method to use, or that integration could result in a loss of biological resolution. In Seurat v5, we introduce more flexible and streamlined infrastructure to run different integration algorithms with a single line of code. This makes it easier to explore the results of different integration methods, and to compare these results to a workflow that excludes integration steps. For this vignette, we use a [dataset of human PBMC profiled with seven different technologies](https://www.nature.com/articles/s41587-020-0465-8), profiled as part of a systematic comparative analysis (`pbmcsca`). The data is available as part of our [SeuratData](https://github.com/satijalab/seurat-data) package.

## Layers in the Seurat v5 object

Seurat v5 assays store data in layers. These layers can store raw, un-normalized counts (`layer='counts'`), normalized data (`layer='data'`), or z-scored/variance-stabilized data (`layer='scale.data'`). We can load in the data, remove low-quality cells, and obtain predicted cell annotations (which will be useful for assessing integration later), using our [Azimuth pipeline](https://satijalab.github.io/azimuth/articles/run_azimuth_tutorial.html).

### Workflow notes

*Note Sep 2024*: The `Azimuth` resources enable cell annotation against a reference for various human tissue sources. It would be of interest to compare these against e.g. `SingleR` and to extend this work to preclinical species. The initial cell annotations via `Azimuth` are used to assist with evaluating integration of the datasets, but it would be worth exploring whether cell annotation can be reasonably left until after multi-platform / multi-'batch' integration.

```{r}
#| label: load_pbmcsca_runAzimuth
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
#| code-fold: true
#| code-summary: "Code to load pbmcsca and run Azimuth"

# load in the pbmc systematic comparative analysis dataset
obj <- LoadData("pbmcsca")
obj <- subset(obj, nFeature_RNA > 1000)
obj <- RunAzimuth(obj, reference = "pbmcref")

# currently, the object has two layers in the RNA assay: counts, and data
obj
# Layers(obj)
```

The object contains data from nine different batches (stored in the `Method` column in the object metadata), representing seven different technologies. We will aim to integrate the different batches together. In previous versions of Seurat, we would require the data to be represented as nine different Seurat objects. When using Seurat v5 assays, we can instead keep all the data in one object, but simply split the layers. After splitting, there are now 18 layers (a counts and data layer for each batch). We can also run a standard scRNA-seq analysis (i.e. without integration). Note that since the data is split into layers, normalization and variable feature identification is performed for each batch independently (a consensus set of variable features is automatically identified).

```{r}
#| label: split_batches_normalize
#| echo: true
#| eval: true
#| message: false
#| code-copy: true

# make a nice table of obj$Method using gt package
method_summ <- table(obj$Method)
method_tb <- tibble(method = names(method_summ), cells = method_summ)
method_tb <- method_tb |>
  gt() |>
  tab_header(title = "Cells per batch") # A wide array of decoration methods is available with gt

obj[["RNA"]] <- split(obj[["RNA"]], f = obj$Method)
obj

options(future.globals.maxSize = 3e+09)
obj <- SCTransform(obj)
obj <- RunPCA(obj, npcs = 30, verbose = F)

# the non-SCTransform version of the layer normalization would be:
# obj <- NormalizeData(obj)
# obj <- FindVariableFeatures(obj)
# obj <- ScaleData(obj)
```

We can now visualize the results of a standard analysis without integration. Note that cells are grouping both by cell type and by underlying method. While a UMAP analysis is just a visualization of this, clustering this dataset would return predominantly batch-specific clusters. Especially if previous cell-type annotations were not available, this would make downstream analysis extremely challenging.

```{r}
#| label: visualize_normalized_batches
#| echo: true
#| eval: true
#| message: false
#| code-copy: true

obj <- FindNeighbors(obj, dims = 1:30, reduction = "pca")
obj <- FindClusters(obj, resolution = 2, cluster.name = "unintegrated_clusters")
obj <- RunUMAP(obj, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
# make summary plots colored by batch or by cell type annotation (predicted.celltype)
# cell type annotations were previously added by Azimuth
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("Method", "predicted.celltype.l2"))
```



<details>

<summary>**Session Info**</summary>

```{r}
sessionInfo()
```

</details>
