---
title: "Seurat tutorial 1 - pbmc3k - with new sctransform steps"
subtitle: "Sep 2024"
author: "Satija lab (original); Scot J Matkovich (notes)"
format:
  gfm: default
  html:
    embed-resources: true
    toc: true
    toc_float: true
    toc-depth: 3
    toc-expand: 3
    toc-location: right
editor: visual
execute:
  cache: false
  keep-md: false
output:
  gfm: default
  html: default
editor_options: 
  chunk_output_type: console
---

# pbmc3k - guided clustering tutorial

Original sources: [R markdown](https://github.com/satijalab/seurat/blob/HEAD/vignettes/pbmc3k_tutorial.Rmd) and [webpage](https://satijalab.org/seurat/articles/pbmc3k_tutorial). The recommended new `sctransform` steps to replace `NormalizeData`, `FindVariableFeatures` and `ScaleData` were derived from this [R markdown](https://github.com/satijalab/seurat/blob/HEAD/vignettes/sctransform_vignette.Rmd) and associated [webpage](https://satijalab.org/seurat/articles/sctransform_vignette).

## Set up the Seurat object

For this tutorial, we will be analyzing the a dataset of Peripheral Blood Mononuclear Cells (PBMC) freely available from 10X Genomics. There are 2,700 single cells that were sequenced on the Illumina NextSeq 500.\

We start by reading in the data. The `Read10X()` function reads in the output of the cellranger pipeline from 10X, returning a unique molecular identified (UMI) count matrix. The values in this matrix represent the number of molecules for each feature (i.e. gene; row) that are detected in each cell (column). Note that more recent versions of cellranger now also output using the [h5 file format](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices), which can be read in using the `Read10X_h5()` function in Seurat.\

We next use the count matrix to create a Seurat object. The object serves as a container that contains both data (like the count matrix) and analysis (like PCA, or clustering results) for a single-cell dataset. For more information, check out the [GitHub Wiki](https://github.com/satijalab/seurat/wiki). For example, in Seurat v5, the count matrix is stored in pbmc\[\["RNA"\]\]\$counts.

```{r}
#| label: data import
#| echo: true
#| eval: true
#| message: false
#| code-copy: true

library(dplyr)
library(Seurat)
library(patchwork)

work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))

# Load the PBMC dataset
if (!dir.exists(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))) {
  
  download.file("https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", destfile = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
  untar(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"), exdir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices"))
  file.remove(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
  
}

pbmc.data <- Read10X(data.dir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))

# Initialize the Seurat object with the raw (non-normalized data)
# Note the min.cells and min.features arguments - these filter out cells with very low gene counts, as well as genes that are detected in very few cells
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)

# See the object summary
pbmc
```

### QC and selecting cells for further analysis

Seurat allows you to easily explore QC metrics and filter cells based on any user-defined criteria. A few QC metrics commonly used by the community include:

-   The number of unique genes detected in each cell.
-   Low-quality cells or empty droplets will often have very few genes
-   Cell doublets or multiplets may exhibit an aberrantly high gene count
-   Similarly, the total number of molecules detected within a cell (correlates strongly with unique genes)
-   The percentage of reads that map to the mitochondrial genome
-   Low-quality / dying cells often exhibit extensive mitochondrial contamination
-   We calculate mitochondrial QC metrics with the PercentageFeatureSet() function, which calculates the percentage of counts originating from a set of features
-   We use the set of all genes starting with MT- as a set of mitochondrial genes

The number of unique genes and total molecules are automatically calculated during CreateSeuratObject(). You can find them stored in the object meta data.

In the example below, we visualize QC metrics, and use these to filter cells. We filter cells that have unique feature counts over 2,500 or less than 200. We filter cells that have \>5% mitochondrial counts.

```{r}
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true

# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")

# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

```

### sctransform to replace previous normalization, variable feature and scaling steps

-   Note that this single command replaces `NormalizeData()`, `ScaleData()`, and `FindVariableFeatures()`.
-   Transformed data will be available in the SCT assay, which is set as the default after running sctransform
-   During normalization, we can also remove confounding sources of variation, for example, mitochondrial mapping percentage
-   In Seurat v5, SCT v2 is applied by default. You can revert to v1 by setting `vst.flavor = 'v1'`
-   The [glmGamPoi](https://bioconductor.org/packages/release/bioc/html/glmGamPoi.html) package substantially improves speed and is used by default if installed, with instructions [here](install.html)

```{r}
#| label: sctransform
#| echo: true
#| eval: true
#| code-copy: true

# run sctransform
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt", verbose = TRUE)
```

## Perform linear dimensional reduction

Seurat provides several useful ways of visualizing both cells and features that define the PCA, including `VizDimReduction()`, `DimPlot()`, and `DimHeatmap()`. In particular `DimHeatmap()` allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to decide which PCs to include for further downstream analyses. Both cells and features are ordered according to their PCA scores. Setting cells to a number plots the ‘extreme’ cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets.

### PCA

```{r}
#| label: PCA
#| echo: true
#| eval: true
#| code-copy: true

# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)

# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)

VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")

DimPlot(pbmc, reduction = "pca") + NoLegend()

DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)

DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
```

### What is the likely 'minimal' dimensionality of the data?

Identifying the true dimensionality of a dataset – can be challenging/uncertain for the user. We therefore suggest these multiple approaches for users. The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example. The second (`ElbowPlot`) is shown below. The third is a heuristic that is commonly used, and can be calculated instantly. In this example, we might have been justified in choosing anything between PC 7-12 as a cutoff.

We chose 10 here, but encourage users to consider the following:

-   Dendritic cell and NK aficionados may recognize that genes strongly associated with PCs 12 and 13 define rare immune subsets (i.e. MZB1 is a marker for plasmacytoid DCs). However, these groups are so rare, they are difficult to distinguish from background noise for a dataset of this size without prior knowledge.
-   We encourage users to repeat downstream analyses with a different number of PCs (10, 15, or even 50!). As you will observe, the results often do not differ dramatically.
-   We advise users to err on the higher side when choosing this parameter. For example, performing downstream analyses with only 5 PCs does significantly and adversely affect results.

```{r}
#| label: Minimum dimensionality
#| echo: true
#| eval: true
#| code-copy: true

ElbowPlot(pbmc)
```

## Run non-linear dimensional reduction (UMAP)

### UMAP

Seurat offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets. The goal of these algorithms is to learn underlying structure in the dataset, in order to place similar cells together in low-dimensional space. Therefore, cells that are grouped together within graph-based clusters determined above should co-localize on these dimension reduction plots.

While we and others have routinely found 2D visualization techniques like tSNE and UMAP to be valuable tools for exploring datasets, all visualization techniques have limitations, and cannot fully represent the complexity of the underlying data. In particular, these methods aim to preserve local distances in the dataset (i.e. ensuring that cells with very similar gene expression profiles co-localize), but often do not preserve more global relationships. We encourage users to leverage techniques like UMAP for visualization, but to avoid drawing biological conclusions solely on the basis of visualization techniques.

### Cluster the cells

Seurat applies a graph-based clustering approach, building upon initial strategies in ([Macosko *et al*](http://www.cell.com/abstract/S0092-8674(15)00549-8)). Importantly, the *distance metric* which drives the clustering analysis (based on previously identified PCs) remains the same. However, our approach to partitioning the cellular distance matrix into clusters has dramatically improved. Our approach was heavily inspired by recent manuscripts which applied graph-based clustering approaches to scRNA-seq data [\[SNN-Cliq, Xu and Su, Bioinformatics, 2015\]](http://bioinformatics.oxfordjournals.org/content/early/2015/02/10/bioinformatics.btv088.abstract) and CyTOF data [\[PhenoGraph, Levine *et al*., Cell, 2015\]](http://www.ncbi.nlm.nih.gov/pubmed/26095251). Briefly, these methods embed cells in a graph structure - for example a K-nearest neighbor (KNN) graph, with edges drawn between cells with similar feature expression patterns, and then attempt to partition this graph into highly interconnected 'quasi-cliques' or 'communities'.

As in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the `FindNeighbors()` function, and takes as input the previously defined dimensionality of the dataset (first 10 PCs).

To cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM [\[SLM, Blondel *et al*., Journal of Statistical Mechanics\]](http://dx.doi.org/10.1088/1742-5468/2008/10/P10008), to iteratively group cells together, with the goal of optimizing the standard modularity function. The `FindClusters()` function implements this procedure, and contains a resolution parameter that sets the 'granularity' of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells. Optimal resolution often increases for larger datasets. The clusters can be found using the `Idents()` function.

```{r}
#| label: UMAP
#| echo: true
#| eval: true
#| code-copy: true

pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)

pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)

DimPlot(pbmc, reduction="umap", label = TRUE) 
```

### Improvements with sctransform

<details>

<summary>**Why can we choose more PCs when using sctransform?**</summary>

In the [standard Seurat workflow](pbmc3k_tutorial.html) we focus on 10 PCs for this dataset, though we highlight that the results are similar with higher settings for this parameter. Interestingly, we've found that when using sctransform, we often benefit by pushing this parameter even higher. We believe this is because the sctransform workflow performs more effective normalization, strongly removing technical effects from the data.

Even after standard log-normalization, variation in sequencing depth is still a confounding factor (see [Figure 1](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1874-1)), and this effect can subtly influence higher PCs. In sctransform, this effect is substantially mitigated (see [Figure 3](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1874-1)). This means that higher PCs are more likely to represent subtle, but biologically relevant, sources of heterogeneity -- so including them may improve downstream analysis.

In addition, sctransform returns 3,000 variable features by default, instead of 2,000. The rationale is similar, the additional variable features are less likely to be driven by technical differences across cells, and instead may represent more subtle biological fluctuations. In general, we find that results produced with sctransform are less dependent on these parameters (indeed, we achieve nearly identical results when using all genes in the transcriptome, though this does reduce computational efficiency). This can help users generate more robust results, and in addition, enables the application of standard analysis pipelines with identical parameter settings that can quickly be applied to new datasets:

For example, the following code replicates the full end-to-end workflow, in a single command:

```{r}
#| label: oneliner
#| echo: true
#| eval: false
#| code-copy: true

pbmc <- CreateSeuratObject(pbmc_data) |>  PercentageFeatureSet(pattern = "^MT-",col.name = 'percent.mt') |>  SCTransform(vars.to.regress = 'percent.mt') |> 
  RunPCA() |>  FindNeighbors(dims = 1:30) |>  RunUMAP(dims = 1:30) |> FindClusters()
  
```

</details>

<details>

<summary>**Where are normalized values stored for sctransform?**</summary>

The results of sctransfrom are stored in the "SCT" assay. You can learn more about multi-assay data and commands in Seurat in our [vignette](multimodal_vignette.html), [command cheat sheet](essential_commands.html#multi-assay-features), or [developer guide](https://github.com/satijalab/seurat/wiki/Assay).

-   `pbmc[["SCT"]]$scale.data` contains the residuals (normalized values), and is used directly as input to PCA. Please note that this matrix is non-sparse, and can therefore take up a lot of memory if stored for all genes. To save memory, we store these values only for variable genes, by setting the return.only.var.genes = TRUE by default in the `SCTransform()` function call.
-   To assist with visualization and interpretation, we also convert Pearson residuals back to ‘corrected’ UMI counts. You can interpret these as the UMI counts we would expect to observe if all cells were sequenced to the same depth. If you want to see exactly how we do this, please look at the correct function [here](https://github.com/ChristophH/sctransform/blob/master/R/denoise.R).
-   The 'corrected' UMI counts are stored in `pbmc[["SCT"]]$counts`. We store log-normalized versions of these corrected counts in `pbmc[["SCT"]]$data`, which are very helpful for visualization.

------------------------------------------------------------------------

</details>

\

Users can individually annotate clusters based on canonical markers. However, the sctransform normalization reveals sharper biological distinctions compared to the [standard Seurat workflow](https://satijalab.org/seurat/articles/pbmc3k_tutorial), in a few ways:

-   Clear separation of at least 3 CD8 T cell populations (naive, memory, effector), based on CD8A, GZMK, CCL5, CCR7 expression
-   Clear separation of three CD4 T cell populations (naive, memory, IFN-activated) based on S100A4, CCR7, IL32, and ISG15
-   Additional developmental sub-structure in B cell cluster, based on TCL1A, FCER2
-   Additional separation of NK cells into CD56dim vs. bright clusters, based on XCL1 and FCGR3A

```{r}
#| label: fplot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 6
#| fig-width: 10

# These are now standard steps in the Seurat workflow for visualization and clustering
# Visualize canonical marker genes as violin plots.
VlnPlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7", "ISG15", "CD3D"), pt.size = 0.2, ncol = 4)

# Visualize canonical marker genes on the sctransform embedding.
FeaturePlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7"), pt.size = 0.2, ncol = 3)
FeaturePlot(pbmc, features = c("CD3D", "ISG15", "TCL1A", "FCER2", "XCL1", "FCGR3A"), pt.size = 0.2, ncol = 3)
```

## Finding differentially expressed features (cluster biomarkers)

Seurat can help you find markers that define clusters via differential expression (DE). By default, it identifies positive and negative markers of a single cluster (specified in `ident.1`), compared to all other cells. `FindAllMarkers()` automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells.

In Seurat v5, we use the presto package (as described [here](https://www.biorxiv.org/content/10.1101/653253v1) and available for installation [here](https://github.com/immunogenomics/presto)), to dramatically improve the speed of DE analysis, particularly for large datasets. For users who are not using presto, you can examine the documentation for this function (`?FindMarkers`) to explore the `min.pct` and `logfc.threshold` parameters, which can be increased in order to increase the speed of DE testing.

```{r}
#| label: markers clusters 2+5
#| echo: true
#| eval: true
#| code-copy: true

# find all markers of cluster 2
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones with at least 2-fold difference
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
pbmc.markers |> 
    group_by(cluster) |>
    dplyr::filter(avg_log2FC > 1)
```

Seurat has several tests for differential expression which can be set with the test.use parameter (see our [DE vignette](de_vignette.html) for details). For example, the ROC test returns the 'classification power' for any individual marker (ranging from 0 - random, to 1 - perfect).

Note the difference in the structure of the `cluster0.markers` object resulting from the ROC test compared to the previous `cluster2.markers` and `cluster5.markers` objects.

```{r}
#| label: markers roc
#| echo: true
#| eval: true
#| code-copy: true

cluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster0.markers, n = 5)
```

We include several tools for visualizing marker expression. `VlnPlot()` (shows expression probability distributions across clusters), and `FeaturePlot()` (visualizes feature expression on a tSNE or PCA plot) are our most commonly used visualizations. **We also suggest exploring `RidgePlot()`, `CellScatter()`, and `DotPlot()`** as additional methods to view your dataset.

`VlnPlot()`

```{r}
#| label: marker violin plots
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10

VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), layer = 'counts', log = TRUE)
```

`FeaturePlot()`

```{r}
#| label: marker feature plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10

FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
```

`RidgePlot()`

```{r}
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10

RidgePlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
```

`CellScatter()` generates a scatter plot of features across two single cells. Pearson correlation between the two cells is displayed above the plot.

`DotPlot()`

```{r}
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10

DotPlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
```

`DoHeatmap()` generates an expression heatmap for given cells and features. In this case, we are plotting the top 20 markers (or all markers if less than 20) for each cluster. Note that the markers are filtered for at least 2-fold differences.

```{r clusterHeatmap}
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 14

pbmc.markers |> 
    group_by(cluster) |> 
    dplyr::filter(avg_log2FC > 1) |> 
    slice_head(n = 10)|> 
    ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
```

### Assigning cell type identity to clusters

Fortunately in the case of this dataset, we can use canonical markers to easily match the unbiased clustering to known cell types. The table below is based on the original pbcm3k guided clustering tutorial, in which 9 clusters were identified. However, in this revised document using `sctransform`, 12 clusters were evident.

Note that the `DoHeatmap` call renders a plot in which the small, additional clusters to the right are very difficult to resolve visually. Inspection of the `top10` tibble derived from `pbmc.markers` was necessary. Remember that `pbmc.markers` contains results from finding markers for every cluster compared to all remaining cells.

Since I am not a PBMC expert I've left some of these new clusters labeled as *unknown*.

| Cluster ID | Markers        | Cell Type    |
|------------|----------------|--------------|
| 0          | IL7R, CD3E     | unknown-1    |
| 1          | CD14, LYZ      | CD14+ Mono   |
| 2          | CCR7, CD27     | unknown-2    |
| 3          | MS4A1          | B            |
| 4          | CD8A           | CD8+ T       |
| 5          | GNLY, NKG7     | NK           |
| 6          | FCGR3A, MS4A7  | FCGR3A+ Mono |
| 7          | CCL5, NKG7     | unknown-3    |
| 8          | CD8A, CD8B     | T            |
| 9          | FCER1A, ENHO   | unknown-4    |
| 10         | IFIT1, IFIT3   | unknown-5    |
| 11         | TREML1, LY6G6F | unknown-6    |

```{r}
#| label: labelled umap plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 9

new.cluster.ids <- c("unknown-1", "CD14+ Mono", "unknown-2", "B", "CD8 T", "NK", "FCGR3A+ Mono", "unknown-3", "T", "unknown-4", "unknown-5", "unknown-6")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = 'umap', label = TRUE, pt.size = 0.5) + NoLegend()
```

The above plot could be modified using `ggplot2` parameters and saved as a graphic file.

```{r}
#| label: save image
#| echo: true
#| eval: false
#| code-copy: true

library(ggplot2)
plot <- DimPlot(pbmc, reduction = "umap", label = TRUE, label.size = 4.5) + xlab("UMAP 1") + ylab("UMAP 2") + 
  theme(axis.title = element_text(size = 18), legend.text = element_text(size = 18)) + 
  guides(colour = guide_legend(override.aes = list(size = 10)))
ggsave(filename = file.path(work.dir,"output/pbmc3k_sctransform_umap.jpg"), height = 7, width = 12, plot = plot, quality = 50)
```

All the calculations and modifications performed to the Seurat object could be saved to facilitate future work.

```{r}
#| label: save final rds
#| echo: true
#| eval: false
#| code-copy: true

saveRDS(pbmc, file = file.path(work.dir,"output/pbmc3k_sctransform_final.rds"))
```

<details>

<summary>**Session Info**</summary>

```{r}
sessionInfo()
```

</details>
