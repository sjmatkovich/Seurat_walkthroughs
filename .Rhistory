# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
#| label: Minimum dimensionality
#| echo: true
#| eval: true
#| code-copy: true
ElbowPlot(pbmc)
#| label: UMAP
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, reduction="umap", label = TRUE)
#| label: fplot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 6
#| fig-width: 10
# These are now standard steps in the Seurat workflow for visualization and clustering
# Visualize canonical marker genes as violin plots.
VlnPlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7", "ISG15", "CD3D"), pt.size = 0.2, ncol = 4)
# Visualize canonical marker genes on the sctransform embedding.
FeaturePlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7"), pt.size = 0.2, ncol = 3)
FeaturePlot(pbmc, features = c("CD3D", "ISG15", "TCL1A", "FCER2", "XCL1", "FCGR3A"), pt.size = 0.2, ncol = 3)
rm(pbmc)
rm(plot1)
rm(plot2)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: sctransform
#| echo: true
#| eval: true
#| code-copy: true
# run sctransform
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt", verbose = FALSE)
#| label: PCA
#| echo: true
#| eval: true
#| code-copy: true
# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
#| label: UMAP
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, reduction="umap", label = TRUE)
#| label: fplot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 6
#| fig-width: 10
# These are now standard steps in the Seurat workflow for visualization and clustering
# Visualize canonical marker genes as violin plots.
VlnPlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7", "ISG15", "CD3D"), pt.size = 0.2, ncol = 4)
# Visualize canonical marker genes on the sctransform embedding.
FeaturePlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7"), pt.size = 0.2, ncol = 3)
FeaturePlot(pbmc, features = c("CD3D", "ISG15", "TCL1A", "FCER2", "XCL1", "FCGR3A"), pt.size = 0.2, ncol = 3)
#| label: markers clusters 2+5
#| echo: true
#| eval: true
#| code-copy: true
# find all markers of cluster 2
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones with at least 2-fold difference
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1)
#| label: markers roc
#| echo: true
#| eval: true
#| code-copy: true
cluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster0.markers, n = 5)
#| label: marker violin plots
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = 'counts', log = TRUE)
VlnPlot(pbmc, features = c("NKG7", "PF4"), layer = 'counts', log = TRUE)
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), layer = 'counts', log = TRUE)
#| label: marker feature plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
RidgePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
RidgePlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
RidgePlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
CellScatter(pbmc, features = c("CD3E", "LYZ", "CD8A"))
?CellScatter
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
DotPlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
DotPlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: labelled umap plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 9
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono", "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
levels(pbmc)
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 14
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
Idents(pbmc)
head(top10)
top10
print(top10, n=Inf)
#| label: labelled umap plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 9
new.cluster.ids <- c("unknown-1", "CD14+ Mono", "unknown-2", "B", "CD8 T", "NK", "FCGR3A+ Mono", "unknown-3", "T", "unknown-4", "unknown-5", "unknown-6")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = 'umap', label = TRUE, pt.size = 0.5) + NoLegend()
renv::activate()
renv::status()
renv::snapshot()
install.packages("yaml")
renv::snapshot()
renv::deactivate()
#| label: libraries_output_init
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(Seurat)
library(SeuratData)
library(SeuratWrappers)
BiocManager::install('SeuratWrappers')
devtools:: install_github ('satijalab/seurat-wrappers')
#| label: libraries_output_init
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(Seurat)
library(SeuratData)
library(SeuratWrappers)
library(Azimuth)
library(ggplot2)
library(patchwork)
options(future.globals.maxSize = 1e9)
work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))
#| label: libraries_output_init
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(Seurat)
library(SeuratData)
InstallData("pbmcsca") # from SeuratData package reference
library(SeuratWrappers)
library(Azimuth)
library(gt) # gt (great tables) package
library(ggplot2)
library(patchwork)
options(future.globals.maxSize = 1e9)
work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))
#| label: load_pbmcsca_runAzimuth
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
#| code-fold: true
#| code-summary: "Code to load pbmcsca and run Azimuth"
# load in the pbmc systematic comparative analysis dataset
obj <- LoadData("pbmcsca")
obj <- subset(obj, nFeature_RNA > 1000)
obj <- RunAzimuth(obj, reference = "pbmcref")
# currently, the object has two layers in the RNA assay: counts, and data
obj
# Layers(obj)
#| label: split_batches_normalize
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
# make a nice table of obj$Method using gt package
method_summ <- table(obj$Method)
method_tb <- tibble(method = names(method_summ), cells = method_summ)
?InstallData
library(dplyr)
#| label: split_batches_normalize
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
# make a nice table of obj$Method using gt package
method_summ <- table(obj$Method)
method_tb <- tibble(method = names(method_summ), cells = method_summ)
method_tb <- method_tb |>
gt() |>
tab_header(title = "Cells per batch") # A wide array of table decoration methods is available with gt
obj[["RNA"]] <- split(obj[["RNA"]], f = obj$Method)
obj
options(future.globals.maxSize = 3e+09)
obj <- SCTransform(obj)
obj <- RunPCA(obj, npcs = 30, verbose = F)
# the non-SCTransform version of the layer normalization would be:
# obj <- NormalizeData(obj)
# obj <- FindVariableFeatures(obj)
# obj <- ScaleData(obj)
test <- Embeddings(obj, reduction="pca")
#| label: visualize_normalized_batches
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
obj <- FindNeighbors(obj, dims = 1:30, reduction = "pca")
obj <- FindClusters(obj, resolution = 2, cluster.name = "unintegrated_clusters")
obj <- RunUMAP(obj, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
# make summary plots colored by batch or by cell type annotation (predicted.celltype)
# cell type annotations were previously added by Azimuth
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("Method", "predicted.celltype.l2"))
obj <- LoadData("pbmcsca")
obj <- subset(obj, nFeature_RNA > 1000)
obj <- RunAzimuth(obj, reference = "pbmcref")
# currently, the object has two layers in the RNA assay: counts, and data
obj
method_summ <- table(obj$Method)
method_tb <- tibble(method = names(method_summ), cells = method_summ)
method_tb <- method_tb |>
gt() |>
tab_header(title = "Cells per batch") # A wide array of table decoration methods is available with gt
obj[["RNA"]] <- split(obj[["RNA"]], f = obj$Method)
obj
options(future.globals.maxSize = 3e+09)
obj_sct <- SCTransform(obj)
obj_sct <- RunPCA(obj_sct, npcs = 30, verbose = F)
# the non-SCTransform version of the layer normalization would be:
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj)
obj <- ScaleData(obj)
rm(obj_sct)
options(future.globals.maxSize = 3e+09)
obj_sct <- SCTransform(obj)
obj_sct <- RunPCA(obj_sct, npcs = 30, verbose = F)
#| label: visualize_normalized_batches
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
obj <- FindNeighbors(obj, dims = 1:30, reduction = "pca")
obj <- RunPCA(obj)
#| label: visualize_normalized_batches
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
obj <- FindNeighbors(obj, dims = 1:30, reduction = "pca")
obj <- FindClusters(obj, resolution = 2, cluster.name = "unintegrated_clusters")
obj <- RunUMAP(obj, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")
# make summary plots colored by batch or by cell type annotation (predicted.celltype)
# cell type annotations were previously added by Azimuth
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("Method", "predicted.celltype.l2"))
#| label: visualize_SCT-normalized_batches
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
obj_sct <- FindNeighbors(obj_sct, dims = 1:30, reduction = "pca")
obj_sct <- FindClusters(obj_sct, resolution = 2, cluster.name = "unintegrated_sct_clusters")
obj_sct <- RunUMAP(obj_sct, dims = 1:30, reduction = "pca", reduction.name = "umap.sct.unintegrated")
# make summary plots colored by batch or by cell type annotation (predicted.celltype)
# cell type annotations were previously added by Azimuth
DimPlot(obj_sct, reduction = "umap.sct.unintegrated", group.by = c("Method", "predicted.celltype.l2"))
saveRDS(obj, file=file.path(work.dir,"output/pbmcsca_split_unintegr.rds"))
saveRDS(obj_sct, file=file.path(work.dir,"output/pbmcsca_split_sct_unintegr.rds"))
save.image("C:/Downloads/tut2_halfway.RData")
load("C:/Downloads/tut2_halfway.RData")
?scVIintegration
?scVIIntegration
library(Seurat)
library(SeuratData)
InstallData("pbmcsca", force.reinstall = F) # from SeuratData package reference
library(SeuratWrappers)
library(Azimuth)
library(tibble)
library(gt) # gt (great tables) package
library(ggplot2)
library(patchwork)
?scVIIntegration
library(Seurat)
library(SeuratData)
InstallData("pbmcsca", force.reinstall = F) # from SeuratData package reference
library(SeuratWrappers)
library(Azimuth)
library(tibble)
library(gt) # gt (great tables) package
library(ggplot2)
library(patchwork)
options(future.globals.maxSize = 1e9)
library(reticulate)
use_virtualenv(virtualenv="C:/Users/sjmat/venv_compbio")
load("C:/Downloads/tut2_halfway.RData")
obj <- IntegrateLayers(
object = obj, method = scVIIntegration,
new.reduction = "integrated.scvi",
conda_env = "C:/Users/sjmat/venv_compbio", verbose = FALSE
)
?IntegrateLayers
obj <- IntegrateLayers(
object = obj, method = scVIIntegration,
new.reduction = "integrated.scvi",
verbose = FALSE
)
obj <- IntegrateLayers(
object = obj, method = scVIIntegration,
new.reduction = "integrated.scvi",
conda_env = NULL,
verbose = FALSE
)
scVIIntegration()
?SeuratWrappers
getwd()
source("R/scVI_pyvirtualenv.R")
scVIIntegration()
scVIIntegration
obj <- IntegrateLayers(
object = obj, method = scVIIntegration,
new.reduction = "integrated.scvi",
virtual_env = "C:/Users/sjmat/venv_compbio",
verbose = FALSE
)
obj <- IntegrateLayers(
object = obj, method = scVIIntegration,
new.reduction = "integrated.scvi",
virtual_env = "C:/Users/sjmat/venv_compbio",
verbose = FALSE
)
saveRDS(obj, file=file.path(work.dir, "pbmcsca_split_integr_scvi_only.rds")))
saveRDS(obj, file=file.path(work.dir, "pbmcsca_split_integr_scvi_only.rds"))
rm(test)
scvi.reduc <- readRDS(file.path(work.dir, "pbmcsca_split_integr_scvi_only.rds"))@cell.embeddings
scvi.reduc <- readRDS(file.path(work.dir, "output/pbmcsca_split_integr_scvi_only.rds"))@cell.embeddings
test <- Embeddings(obj, reduction="integrated.scvi")
scvi.reduc <- Embeddings(readRDS(file.path(work.dir, "output/pbmcsca_split_integr_scvi_only.rds")), reduction="integrated.scvi")
scvi.reduc <- scvi.reduc[Cells(obj),]
head(obj[['integrated.scvi']]@cell.embeddings)
obj <- IntegrateLayers(
object = obj, method = CCAIntegration,
orig.reduction = "pca", new.reduction = 'integrated.cca',
verbose = FALSE)
method_summ <- table(obj$Method)
method_summ
obj <- IntegrateLayers(
object = obj, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = 'integrated.rpca',
verbose = FALSE)
options(future.globals.maxSize = 3e+09)
obj <- IntegrateLayers(
object = obj, method = RPCAIntegration,
orig.reduction = "pca", new.reduction = 'integrated.rpca',
verbose = FALSE)
obj <- IntegrateLayers(
object = obj, method = HarmonyIntegration,
orig.reduction = "pca", new.reduction = 'harmony',
verbose = FALSE)
harm <- Embeddings(obj, reduction="harmony")
obj_sct <- IntegrateLayers(
object = obj_sct, method = FastMNNIntegration,
new.reduction = 'integrated.mnn',
verbose = FALSE)
load("C:/Downloads/tut2_halfway.RData")
