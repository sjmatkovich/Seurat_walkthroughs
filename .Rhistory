plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: LogNormalize
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
#| label: VariableFeatures
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot3 <- VariableFeaturePlot(pbmc)
plot4 <- LabelPoints(plot = plot3, points = top10, repel = TRUE)
plot3 + plot4
#| label: Scaling
#| echo: true
#| eval: true
#| code-copy: true
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
#| label: Dimension reduction
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
#| label: Dimension loadings
#| echo: true
#| eval: true
#| code-copy: true
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
#| label: Minimum dimensionality
#| echo: true
#| eval: true
#| code-copy: true
ElbowPlot(pbmc)
#| label: Cluster cells
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
#| label: umap with plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig.height: 8
#| fig.width: 8
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label individual clusters
DimPlot(pbmc, reduction = 'umap')
#| label: save object
#| echo: true
#| eval: false
#| code-copy: true
saveRDS(pbmc, file = file.path(work.dir,"pbmc3k_tutorial.rds"))
#| label: markers 1
#| echo: true
#| eval: true
#| code-copy: true
# find all markers of cluster 2
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones with at least 2-fold difference
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1)
#| label: markers roc
#| echo: true
#| eval: true
#| code-copy: true
cluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
#| label: data import
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(dplyr)
library(Seurat)
library(patchwork)
work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))
# Load the PBMC dataset
if (!dir.exists(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))) {
download.file("https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", destfile = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
untar(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"), exdir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices"))
file.remove(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
}
pbmc.data <- Read10X(data.dir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))
# Initialize the Seurat object with the raw (non-normalized data)
# Note the min.cells and min.features arguments - these filter out cells with very low gene counts, as well as genes that are detected in very few cells
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
# See the object summary
pbmc
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: VariableFeatures
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot3 <- VariableFeaturePlot(pbmc)
plot4 <- LabelPoints(plot = plot3, points = top10, repel = TRUE)
plot3 + plot4
#| label: data import
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(dplyr)
library(Seurat)
library(patchwork)
work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))
# Load the PBMC dataset
if (!dir.exists(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))) {
download.file("https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", destfile = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
untar(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"), exdir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices"))
file.remove(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
}
pbmc.data <- Read10X(data.dir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))
# Initialize the Seurat object with the raw (non-normalized data)
# Note the min.cells and min.features arguments - these filter out cells with very low gene counts, as well as genes that are detected in very few cells
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
# See the object summary
pbmc
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: sctransform
#| echo: true
#| eval: true
#| code-copy: true
# run sctransform
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt", verbose = FALSE)
#| label: PCA and UMAP
#| echo: true
#| eval: true
#| code-copy: true
# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, label = TRUE)
#| label: examine PCA results
#| echo: true
#| eval: true
#| code-copy: true
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
#| label: data import
#| echo: true
#| eval: true
#| message: false
#| code-copy: true
library(dplyr)
library(Seurat)
library(patchwork)
work.dir <- "C:/Downloads/"
if (!dir.exists(file.path(work.dir,"output"))) dir.create(file.path(work.dir,"output"))
# Load the PBMC dataset
if (!dir.exists(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))) {
download.file("https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz", destfile = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
untar(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"), exdir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices"))
file.remove(file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices.tar.gz"))
}
pbmc.data <- Read10X(data.dir = file.path(work.dir,"pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19/"))
# Initialize the Seurat object with the raw (non-normalized data)
# Note the min.cells and min.features arguments - these filter out cells with very low gene counts, as well as genes that are detected in very few cells
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
# See the object summary
pbmc
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: sctransform
#| echo: true
#| eval: true
#| code-copy: true
# run sctransform
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt", verbose = FALSE)
#| label: PCA
#| echo: true
#| eval: true
#| code-copy: true
# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
#| label: Minimum dimensionality
#| echo: true
#| eval: true
#| code-copy: true
ElbowPlot(pbmc)
#| label: UMAP
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, reduction="umap", label = TRUE)
#| label: fplot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 6
#| fig-width: 10
# These are now standard steps in the Seurat workflow for visualization and clustering
# Visualize canonical marker genes as violin plots.
VlnPlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7", "ISG15", "CD3D"), pt.size = 0.2, ncol = 4)
# Visualize canonical marker genes on the sctransform embedding.
FeaturePlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7"), pt.size = 0.2, ncol = 3)
FeaturePlot(pbmc, features = c("CD3D", "ISG15", "TCL1A", "FCER2", "XCL1", "FCGR3A"), pt.size = 0.2, ncol = 3)
rm(pbmc)
rm(plot1)
rm(plot2)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
#| label: QC metrics
#| echo: true
#| eval: true
#| code-copy: true
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#| label: sctransform
#| echo: true
#| eval: true
#| code-copy: true
# run sctransform
pbmc <- SCTransform(pbmc, vars.to.regress = "percent.mt", verbose = FALSE)
#| label: PCA
#| echo: true
#| eval: true
#| code-copy: true
# perform dimensionality reduction by PCA and UMAP embedding
# These are now standard steps in the Seurat workflow for visualization and clustering
pbmc <- RunPCA(pbmc, verbose = FALSE)
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
#| label: UMAP
#| echo: true
#| eval: true
#| code-copy: true
pbmc <- RunUMAP(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:30, verbose = FALSE)
pbmc <- FindClusters(pbmc, verbose = FALSE)
DimPlot(pbmc, reduction="umap", label = TRUE)
#| label: fplot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 6
#| fig-width: 10
# These are now standard steps in the Seurat workflow for visualization and clustering
# Visualize canonical marker genes as violin plots.
VlnPlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7", "ISG15", "CD3D"), pt.size = 0.2, ncol = 4)
# Visualize canonical marker genes on the sctransform embedding.
FeaturePlot(pbmc, features = c("CD8A", "GZMK", "CCL5", "S100A4", "ANXA1", "CCR7"), pt.size = 0.2, ncol = 3)
FeaturePlot(pbmc, features = c("CD3D", "ISG15", "TCL1A", "FCER2", "XCL1", "FCGR3A"), pt.size = 0.2, ncol = 3)
#| label: markers clusters 2+5
#| echo: true
#| eval: true
#| code-copy: true
# find all markers of cluster 2
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2)
head(cluster2.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones with at least 2-fold difference
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1)
#| label: markers roc
#| echo: true
#| eval: true
#| code-copy: true
cluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster0.markers, n = 5)
#| label: marker violin plots
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = 'counts', log = TRUE)
VlnPlot(pbmc, features = c("NKG7", "PF4"), layer = 'counts', log = TRUE)
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), layer = 'counts', log = TRUE)
#| label: marker feature plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
RidgePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
RidgePlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker ridge plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
RidgePlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
CellScatter(pbmc, features = c("CD3E", "LYZ", "CD8A"))
?CellScatter
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
DotPlot(pbmc, features = c("CD3E", "LYZ", "CD8A"))
#| label: marker cell scatter plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 10
DotPlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP", "CD8A"))
#| label: labelled umap plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 9
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono", "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
levels(pbmc)
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 10
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
#| label: cluster heatmap
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 8
#| fig-width: 14
pbmc.markers |>
group_by(cluster) |>
dplyr::filter(avg_log2FC > 1) |>
slice_head(n = 10)|>
ungroup() -> top10
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
Idents(pbmc)
head(top10)
top10
print(top10, n=Inf)
#| label: labelled umap plot
#| echo: true
#| eval: true
#| code-copy: true
#| fig-height: 5
#| fig-width: 9
new.cluster.ids <- c("unknown-1", "CD14+ Mono", "unknown-2", "B", "CD8 T", "NK", "FCGR3A+ Mono", "unknown-3", "T", "unknown-4", "unknown-5", "unknown-6")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = 'umap', label = TRUE, pt.size = 0.5) + NoLegend()
renv::activate()
renv::status()
renv::snapshot()
install.packages("yaml")
renv::snapshot()
renv::deactivate()
